[
    {
        "id": 1,
        "question": "Two Sum",
        "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
        "input": "First line contains N size of the array \n Second line contains nums array separated by spaces \n Third line contains a number target.",
        "output": "Return an array of size 2 which represents the pair of indices that sum to target.",
        "constraints": "2 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9\nOnly one valid answer exists.",
        "sample_input_1": "5\n1 2 3 4 5\n7",
        "sample_output_1": "2 5",
        "sample_input_2": "4\n3 3 4 5\n6",
        "sample_output_2": "1 2"
    },
    {
        "id": 2,
        "question": "Subarray Sum Equals K",
        "description": "Given an array of integers nums and an integer k, find the total number of continuous subarrays whose sum equals k.",
        "input": "First line contains N size of the array \n Second line contains nums array separated by spaces \n Third line contains a number k.",
        "output": "Return the number of subarrays whose sum equals k.",
        "constraints": "1 <= nums.length <= 2 * 10^4\n-1000 <= nums[i] <= 1000\n-10^7 <= k <= 10^7",
        "sample_input_1": "5\n1 2 3 -2 2\n3",
        "sample_output_1": "3",
        "sample_input_2": "6\n1 1 1 1 1 1\n3",
        "sample_output_2": "4"
    },
    {
        "id": 3,
        "question": "Find Peak Element",
        "description": "A peak element is an element that is strictly greater than its neighbors. Given an integer array nums, find a peak element and return its index.",
        "input": "First line contains N size of the array \n Second line contains nums array separated by spaces.",
        "output": "Return the index of any peak element.",
        "constraints": "1 <= nums.length <= 10^5\n-10^4 <= nums[i] <= 10^4\nnums[i] != nums[i+1]",
        "sample_input_1": "5\n1 2 3 1 5",
        "sample_output_1": "2",
        "sample_input_2": "6\n10 20 15 2 23 90",
        "sample_output_2": "5"
    },
    {
        "id": 4,
        "question": "Product of Array Except Self",
        "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].",
        "input": "First line contains N size of the array \n Second line contains nums array separated by spaces.",
        "output": "Return an array of the product except self for each element.",
        "constraints": "2 <= nums.length <= 10^5\n-30 <= nums[i] <= 30\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.",
        "sample_input_1": "4\n1 2 3 4",
        "sample_output_1": "24 12 8 6",
        "sample_input_2": "3\n5 6 2",
        "sample_output_2": "12 10 30"
    },
    {
        "id": 5,
        "question": "Maximum Subarray",
        "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
        "input": "First line contains N size of the array \n Second line contains nums array separated by spaces.",
        "output": "Return the sum of the subarray with the largest sum.",
        "constraints": "1 <= nums.length <= 10^5\n-10^4 <= nums[i] <= 10^4",
        "sample_input_1": "9\n-2 1 -3 4 -1 2 1 -5 4",
        "sample_output_1": "6",
        "sample_input_2": "5\n1 2 3 -2 2",
        "sample_output_2": "6"
    },
    {
        "id": 6,
        "question": "Merge Intervals",
        "description": "Given an array of intervals where intervals[i] = [start, end], merge all overlapping intervals and return an array of the non-overlapping intervals that cover all the intervals in the input.",
        "input": "First line contains N number of intervals \n Second line contains pairs of intervals separated by spaces.",
        "output": "Return a list of merged intervals.",
        "constraints": "1 <= intervals.length <= 10^4\n0 <= intervals[i][0] <= intervals[i][1] <= 10^4",
        "sample_input_1": "4\n1 3 2 6 8 10 15 18",
        "sample_output_1": "1 6 8 10 15 18",
        "sample_input_2": "3\n1 4 4 5 6 7",
        "sample_output_2": "1 5 6 7"
    },
    {
        "id": 7,
        "question": "Majority Element",
        "description": "Given an array nums of size n, return the majority element. The majority element is the element that appears more than âŒŠn / 2âŒ‹ times. You may assume that the majority element always exists in the array.",
        "input": "First line contains N size of the array \n Second line contains nums array separated by spaces.",
        "output": "Return the majority element.",
        "constraints": "1 <= nums.length <= 5 * 10^4\n-10^9 <= nums[i] <= 10^9",
        "sample_input_1": "7\n3 2 3 3 3 2 1",
        "sample_output_1": "3",
        "sample_input_2": "5\n2 2 1 1 1",
        "sample_output_2": "1"
    },
    {
        "id": 8,
        "question": "Search Insert Position",
        "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.",
        "input": "First line contains N size of the array \n Second line contains nums array separated by spaces \n Third line contains a number target.",
        "output": "Return the index of the target or its appropriate insertion position.",
        "constraints": "1 <= nums.length <= 10^4\n-10^4 <= nums[i] <= 10^4\nnums contains distinct values.",
        "sample_input_1": "4\n1 3 5 6\n5",
        "sample_output_1": "2",
        "sample_input_2": "5\n1 2 4 6 7\n3",
        "sample_output_2": "2"
    },
    {
        "id": 9,
        "question": "Longest Common Prefix",
        "description": "Write a function to find the longest common prefix string amongst an array of strings.",
        "input": "First line contains N number of strings \n Second line contains strings separated by spaces.",
        "output": "Return the longest common prefix.",
        "constraints": "1 <= strs.length <= 200\n0 <= strs[i].length <= 200\nstrs[i] consists of only lowercase English letters.",
        "sample_input_1": "3\nflower flow flight",
        "sample_output_1": "fl",
        "sample_input_2": "4\ninterview internet internal intersection",
        "sample_output_2": "inte"
    },
    {
        "id": 10,
        "question": "Best Time to Buy and Sell Stock",
        "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.",
        "input": "First line contains N size of the array \n Second line contains prices array separated by spaces.",
        "output": "Return the maximum profit.",
        "constraints": "1 <= prices.length <= 10^5\n0 <= prices[i] <= 10^4",
        "sample_input_1": "6\n7 1 5 3 6 4",
        "sample_output_1": "5",
        "sample_input_2": "4\n8 5 3 2",
        "sample_output_2": "0"
    },
    {
        "id": 11,
        "question": "Climbing Stairs",
        "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
        "input": "First line contains N number of steps.",
        "output": "Return the number of distinct ways to reach the top.",
        "constraints": "1 <= n <= 45",
        "sample_input_1": "2",
        "sample_output_1": "2",
        "sample_input_2": "3",
        "sample_output_2": "3"
    },
    {
        "id": 12,
        "question": "Reverse Integer",
        "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.",
        "input": "A single integer x.",
        "output": "Return the reversed integer.",
        "constraints": "-2^31 <= x <= 2^31 - 1",
        "sample_input_1": "123",
        "sample_output_1": "321",
        "sample_input_2": "-123",
        "sample_output_2": "-321"
    },
    {
        "id": 13,
        "question": "Valid Parentheses",
        "description": "Given a string s consisting of just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order.",
        "input": "A string s of brackets.",
        "output": "Return true if valid, false otherwise.",
        "constraints": "1 <= s.length <= 10^4",
        "sample_input_1": "()[]{}",
        "sample_output_1": "true",
        "sample_input_2": "(]",
        "sample_output_2": "false"
    },
    {
        "id": 14,
        "question": "Find the Difference",
        "description": "You are given two strings s and t. String t is generated by random shuffling string s and then adding one more letter at a random position. Find the letter that was added.",
        "input": "Two strings s and t.",
        "output": "Return the letter that was added.",
        "constraints": "0 < s.length <= 1000\n0 < t.length <= 1001",
        "sample_input_1": "abcd\nabcde",
        "sample_output_1": "e",
        "sample_input_2": "xyz\nzyxw",
        "sample_output_2": "w"
    },
    {
        "id": 15,
        "question": "Rotate Array",
        "description": "Given an array, rotate the array to the right by k steps, where k is non-negative.",
        "input": "First line contains N size of the array \n Second line contains the nums array separated by spaces \n Third line contains an integer k.",
        "output": "Return the rotated array.",
        "constraints": "1 <= nums.length <= 10^5\n0 <= k <= 10^5",
        "sample_input_1": "5\n1 2 3 4 5\n2",
        "sample_output_1": "4 5 1 2 3",
        "sample_input_2": "3\n1 2 3\n1",
        "sample_output_2": "3 1 2"
    },
    {
        "id": 16,
        "question": "Intersection of Two Arrays II",
        "description": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays.",
        "input": "First line contains N size of the first array \n Second line contains the first array separated by spaces \n Third line contains M size of the second array \n Fourth line contains the second array separated by spaces.",
        "output": "Return an array of intersection elements.",
        "constraints": "1 <= nums1.length, nums2.length <= 1000",
        "sample_input_1": "4\n1 2 2 1\n3\n2 2 3",
        "sample_output_1": "2 2",
        "sample_input_2": "5\n4 9 5\n4\n9 4 9 8 4",
        "sample_output_2": "4 9"
    },
    {
        "id": 17,
        "question": "Binary Tree Inorder Traversal",
        "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.",
        "input": "A binary tree represented as a root node.",
        "output": "Return a list of values in inorder.",
        "constraints": "0 <= Number of nodes <= 100",
        "sample_input_1": "[1,null,2,3]",
        "sample_output_1": "[1,3,2]",
        "sample_input_2": "[1,2,3]",
        "sample_output_2": "[2,1,3]"
    },
    {
        "id": 18,
        "question": "Maximum Product Subarray",
        "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest product and return its product.",
        "input": "First line contains N size of the array \n Second line contains nums array separated by spaces.",
        "output": "Return the maximum product.",
        "constraints": "1 <= nums.length <= 2 * 10^4\n-10 <= nums[i] <= 10",
        "sample_input_1": "5\n2 3 -2 4",
        "sample_output_1": "6",
        "sample_input_2": "2\n-2 0 -1",
        "sample_output_2": "0"
    },
    {
        "id": 19,
        "question": "Longest Palindromic Substring",
        "description": "Given a string s, return the longest palindromic substring in s.",
        "input": "A string s.",
        "output": "Return the longest palindromic substring.",
        "constraints": "1 <= s.length <= 1000",
        "sample_input_1": "babad",
        "sample_output_1": "bab",
        "sample_input_2": "cbbd",
        "sample_output_2": "bb"
    },
    {
        "id": 20,
        "question": "Count Primes",
        "description": "Count the number of prime numbers less than a non-negative number, n.",
        "input": "A non-negative integer n.",
        "output": "Return the number of prime numbers less than n.",
        "constraints": "0 <= n <= 10^6",
        "sample_input_1": "10",
        "sample_output_1": "4",
        "sample_input_2": "0",
        "sample_output_2": "0"
    }
]